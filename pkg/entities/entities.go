package entities

import (
	"net/url"
	"strings"
)

type PermissionRequest struct {
	Header           map[string]string `json:"header" validate:"required"`
	Method           string            `json:"method" validate:"required"`
	RemoteAddr       string            `json:"remoteAddr" validate:"required"`
	URL              *url.URL          `json:"url" validate:"required"`
	RawBody          []byte            `json:"rawBody"`
	headerAttbsLower bool
}

func (c *PermissionRequest) GetHeader(name string) string {
	if !c.headerAttbsLower {
		for k, v := range c.Header {
			delete(c.Header, k)
			c.Header[strings.ToLower(k)] = v
		}
		c.headerAttbsLower = true
	}

	return c.Header[strings.ToLower(name)]
}

type AutoGenerated struct {
	// Source        string `json:"source"`
	WorkspaceName string `json:"workspace_name"`
	/* UpstreamURI   string `json:"upstream_uri"`
	Service       struct {
		Retries        int      `json:"retries"`
		Port           int      `json:"port"`
		WriteTimeout   int      `json:"write_timeout"`
		TLSVerify      bool     `json:"tls_verify"`
		UpdatedAt      int      `json:"updated_at"`
		TLSVerifyDepth int      `json:"tls_verify_depth"`
		ConnectTimeout int      `json:"connect_timeout"`
		WsID           string   `json:"ws_id"`
		Protocol       string   `json:"protocol"`
		Host           string   `json:"host"`
		ReadTimeout    int      `json:"read_timeout"`
		CreatedAt      int      `json:"created_at"`
		ID             string   `json:"id"`
		Name           string   `json:"name"`
		Tags           []string `json:"tags"`
		CaCertificates []string `json:"ca_certificates"`
		Enabled        bool     `json:"enabled"`
	} `json:"service"`
	Tries []struct {
		Port              int    `json:"port"`
		BalancerStart     int64  `json:"balancer_start"`
		BalancerStartNs   int64  `json:"balancer_start_ns"`
		BalancerLatencyNs int    `json:"balancer_latency_ns"`
		IP                string `json:"ip"`
		BalancerLatency   int    `json:"balancer_latency"`
	} `json:"tries"`
	Workspace string `json:"workspace"`
	Latencies struct {
		Receive int `json:"receive"`
		Proxy   int `json:"proxy"`
		Request int `json:"request"`
		Kong    int `json:"kong"`
	} `json:"latencies"`
	ClientIP       string `json:"client_ip"`
	StartedAt      int64  `json:"started_at"`
	UpstreamStatus string `json:"upstream_status"` */
	/* Response       struct {
		Size    int `json:"size"`
		Status  int `json:"status"`
		Headers struct {
			XKongUpstreamLatency          string `json:"x-kong-upstream-latency"`
			XKongUpstreamStatus           string `json:"x-kong-upstream-status"`
			AccessControlAllowOrigin      string `json:"access-control-allow-origin"`
			AccessControlAllowCredentials string `json:"access-control-allow-credentials"`
			ContentLength                 string `json:"content-length"`
			Date                          string `json:"date"`
			ContentType                   string `json:"content-type"`
			XKongRequestID                string `json:"x-kong-request-id"`
			Via                           string `json:"via"`
			Connection                    string `json:"connection"`
			XKongProxyLatency             string `json:"x-kong-proxy-latency"`
			Server                        string `json:"server"`
		} `json:"headers"`
	} `json:"response"` */
	/* Route struct {
		RequestBuffering  bool `json:"request_buffering"`
		ResponseBuffering bool `json:"response_buffering"`
		Service           struct {
			ID string `json:"id"`
		} `json:"service"`
		HTTPSRedirectStatusCode int      `json:"https_redirect_status_code"`
		PreserveHost            bool     `json:"preserve_host"`
		WsID                    string   `json:"ws_id"`
		UpdatedAt               int      `json:"updated_at"`
		RegexPriority           int      `json:"regex_priority"`
		PathHandling            string   `json:"path_handling"`
		CreatedAt               int      `json:"created_at"`
		Protocols               []string `json:"protocols"`
		ID                      string   `json:"id"`
		Name                    string   `json:"name"`
		Tags                    []string `json:"tags"`
		Methods                 []string `json:"methods"`
		StripPath               bool     `json:"strip_path"`
		Paths                   []string `json:"paths"`
	} `json:"route"` */
	/* Request struct {
		Size    int    `json:"size"`
		Method  string `json:"method"`
		ID      string `json:"id"`
		URL     string `json:"url"`
		Headers struct {
			UserAgent      string `json:"user-agent"`
			Traceparent    string `json:"traceparent"`
			Connection     string `json:"connection"`
			ContentLength  string `json:"content-length"`
			Host           string `json:"host"`
			AcceptEncoding string `json:"accept-encoding"`
		} `json:"headers"`
		URI         string `json:"uri"`
		Querystring struct {
		} `json:"querystring"`
	} `json:"request"` */
	TraceID struct {
		W3C string `json:"w3c"`
	} `json:"trace_id"`
}
